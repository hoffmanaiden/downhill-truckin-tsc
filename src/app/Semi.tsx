/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 semi.glb -t 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh
    Cube001_1: THREE.Mesh
    Cube001_2: THREE.Mesh
    Cube001_3: THREE.Mesh
    Cube: THREE.Mesh
  }
  materials: {
    white: THREE.MeshStandardMaterial
    chasses: THREE.MeshStandardMaterial
    blacktrim: THREE.MeshStandardMaterial
    Yellow: THREE.MeshStandardMaterial
    gray: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Semi(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/semi.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[-0.303, 0.183, 0]} scale={0.66}>
        <mesh geometry={nodes.Cube001.geometry} material={materials.white} />
        <mesh geometry={nodes.Cube001_1.geometry} material={materials.chasses} />
        <mesh geometry={nodes.Cube001_2.geometry} material={materials.blacktrim} />
        <mesh geometry={nodes.Cube001_3.geometry} material={materials.Yellow} />
      </group>
      <mesh geometry={nodes.Cube.geometry} material={materials.gray} position={[-3.737, 0, 0]} scale={0.461} />
    </group>
  )
}

useGLTF.preload('/semi.glb')
