/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 pineTree.glb -t 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useFrame, useThree } from '@react-three/fiber'
import { useGLTF, KeyboardControls, useKeyboardControls, OrbitControls, CameraControls } from '@react-three/drei'
import { RigidBody, RapierRigidBody, useRevoluteJoint, useFixedJoint, CylinderCollider } from "@react-three/rapier"
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cylinder: THREE.Mesh
    Cone: THREE.Mesh
    Cone001: THREE.Mesh
    Cone002: THREE.Mesh
  }
  materials: {
    wood: THREE.MeshStandardMaterial
    darkGreen: THREE.MeshStandardMaterial
    ['darkGreen.001']: THREE.MeshStandardMaterial
    ['darkGreen.002']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function PineTree(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/pineTree.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <RigidBody colliders="trimesh" type='fixed'>
        <mesh geometry={nodes.Cylinder.geometry} material={materials.wood} />
        <mesh geometry={nodes.Cone.geometry} material={materials.darkGreen} rotation={[0, -0.736, 0]} scale={[1.139, 1, 1.139]} />
        <mesh geometry={nodes.Cone001.geometry} material={materials['darkGreen.001']} position={[0, 2.154, 0]} rotation={[0, -0.41, 0]} scale={[1.057, 0.921, 1.057]} />
        <mesh geometry={nodes.Cone002.geometry} material={materials['darkGreen.002']} position={[0, 4.162, 0]} rotation={[0, -0.159, 0]} scale={[0.896, 0.877, 0.896]} />
      </RigidBody>
    </group>
  )
}

useGLTF.preload('/pineTree.glb')
